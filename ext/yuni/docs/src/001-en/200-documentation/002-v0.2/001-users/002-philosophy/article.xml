<title>Philosophy</title>


<h2>Values</h2>
<p>
The Yuni team believes it is important to be clear as to what is important to
us. Stating clearly the values we believe in helps to be consistent in
technical and philosophical choices for Yuni.
</p>

<ul>
<li><b>Efficiency :</b>
We want Yuni to be fast. At least as fast as alternatives, and faster
whenever possible.
</li>
<li><b>Portability :</b>
The code must be portable and work seamlessly on every supported platform.
The only exception is UI, where windows and controls must follow the visual
codes of the host OS. Yuni also provides defines to help you manage your own
non-portable code.
</li>
<li><b>Elegance :</b>
We want Yuni to be elegant both in how it is written and in the interfaces it
offers to users. Beautiful code is more easily debugged and maintained. A
nice API encourages use. We also follow a strict coding style to ensure code
legibility and homogeneity.
</li>
<li><b>Abstraction :</b>
Most of the time, you do not care how a feature is implemented behind the
curtains. You want an interface that matches your mental representation of
the concepts you handle. The API has to use the correct vocabulary and
structure to help you understand what it does (not how it does it).
</li>
<li><b>Modularity :</b>
Features in Yuni are mostly independent. You can choose to use only what you
need by including and linking with a strict minimum instead of the whole
thing. This means you do not have to pay for anything you do not use (which
is a very important asset allowed by C++). When some features rely on other
features, the fact should be clearly documented.
</li>
<li><b>Completeness :</b>
When dealing with a topic in Yuni, the whole topic should be covered. If any
hole is left in the code (temporarily or permanently), a clear reason must be
provided.
</li>
<li><b>Versatility :</b>
Yuni must be able to adapt to your needs. We do that by offering statically
configurable classes (using templates, and particularly
<a href="../concepts/policies/@{INDEX}">policies</a>),
dynamically configurable behaviours (using method arguments), and by
providing	an extension mechanism that you can use to add features to some
Yuni objects. Also, Yuni adapts to your level by offering good default values
for beginners who want basic functionality, and complete configurable
behaviour for advanced users who want to access all the power inside.
</li>
</ul>


<h2>Structure</h2>
<p>
Yuni's structure is a direct consequence of the values we believe in. Yuni is
a set of libraries because it allows for modularity. Yuni hides useless classes
into Private namespaces to avoid cluttering the API for more elegance. Yuni has
compiled libraries in some cases, and static libraries that have to be included
in your code when the need for versatility and / or efficiency arises.
</p>
<p>
Yuni is split into modules. The two main modules are "core" and "thread" which
are required dependencies for all the other modules. All the other modules are
optional and can be used on a case-by-case basis.
</p>

<h2>Love is in the small things</h2>
<p>
We want Yuni to be useful for all kinds of projects, and for all kinds of
developers. This is why we put a lot of attention to details. For example, we
always offer default values for optional method arguments (or template
arguments). Of course if you simply want to use the default behaviour, you
could write :
</p>
<source type="cpp">
class MyEventLoop : public Yuni::Core::EventLoop::IEventLoop&lt;MyEventLoop&gt;
{
	Yuni::String pMyString;
};
</source>
<p>
But if you want to have full control over how to create your Yuni objects and
do :
</p>
<source type="cpp">
class MyEventLoop : public Yuni::Core::EventLoop::IEventLoop&lt;MyEventLoop,
	Yuni::Core::EventLoop::Flow::Timer&lt;MyEventLoop&gt;,
	Yuni::Core::EventLoop::Statistics::None,
	false&gt;
{
	Yuni::CustomString&lt;256,false&gt; pMyString;
};
</source>
<p>
Well you can. Because we care about you.
</p>
<p>
Also, many other libraries will ask for exterior dependencies and will require
that you install them yourself using a package system, using a binary install,
or worse, by compiling the tarball yourself. Just like any other library, Yuni
has requirements for its use, but we do all we can to alleviate the load from
your backs. First, those libraries are linked to a feature, so if you do not
want the feature, Yuni will not ask you to have the library. Let's say for
example that you are writing a command line task scheduler. Why should we force
you to have ffmpeg installed when you clearly will not need audio ? We don't.
</p>
<p>
Second, if you end up really needing a feature, then it's up to us to make sure
that installing a compatible version of the required libraries will not be a
problem to you, will not break your system and will not take too much of your
time. The answer to that is DevPacks. Yuni will automatically download the
DevPacks you need depending on the features you asked for when launching CMake.
It will not install these library versions on your system, it will just keep
them handy in your project directory for its own use. What about the few people
who do not have Internet ? They can just go get the DevPack they need on
someone else's connection and then copy the file in the proper folder. Yes, we
cater to everyone, to the best of our ability.
</p>


<h2>Helping people to like C++</h2>
<p>
This is a list of things that are often pointed as "bad" about the C++
language. It is by no means objective or complete, but will serve as a support
to explain how Yuni intends to help you write applications in C++.
</p>
<ol>
<li>Pointers lead to problematic memory management; C++ has no garbage collection</li>
<li>High-level code in C++ hides inefficiency in apparently simple constructs</li>
<li>Over-complicated, difficult to master</li>
<li>Too low-level because of its C legacy</li>
<li>Lack of multi-threaded support, external APIs create portability issues</li>
<li>The STL is not efficient, its prototypes / coding style are ugly</li>
</ol>
<p>
All those are reasonably valid points. Now here is how Yuni tries to compensate
for these drawbacks :
</p>
<ol>
<li>Yuni offers <a href="../concepts/smartptr/@{INDEX}">Smart Pointers</a>,
  which bring easier and safer memory management. They also avoid memory leaks
  without the massive overhead of a garbage collector.
</li>
<li>Efficiency being one of our prime concerns, Yuni's code is supposed to be
  reasonably fast. However incorrect use of a given feature can lead to
  inefficiency. The only way to alleviate this problem is for us to document
  proper uses of the various classes and methods.
</li>
<li>It is true that C++ can be very complicated to read, understand and debug.
  Yuni encapsulates most of the difficult code inside, well hidden in its
  bowels, and tries to offer you an easy yet powerful interface.
</li>
<li>C++ can be very low-level. But it does not have to be. Yuni offers some high-
  level concepts that are missing from C++ to help you think and code more
  abstractly : delegates, events, singletons, jobs. Also it encapsulates
  low-level routines inside OO interfaces : math, string, getopt, io, ...
</li>
<li>C++ has no native MT support in the language, and there is not much we can do
  about that. Also, few people are willing to write cross-platform threading
  support since it is a hassle and implicates very error-prone code. So Yuni
  does it for you.
</li>
<li>Some STL implementations are known to be slow, so in some cases Yuni offers
  its own faster implementations using more readable prototypes, in accordance
  with the Yuni coding style.
</li>
</ol>

