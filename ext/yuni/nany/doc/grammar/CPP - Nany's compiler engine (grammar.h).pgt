##TEMPLATE-NAME 'CPP - Nany2CPP: grammar.h (modified from Kessels C engine)'
##LANGUAGE 'C'
##ENGINE-NAME 'Nany2Cpp engine'
##AUTHOR 'Bruno Borri and Damien Gerard'
##FILE-EXTENSION 'h'
##NOTES
This template creates a .h file for use by the Kessels engine.
The complete CGT (Compiled Grammar Table) is hardcoded into the .h
file, so initializing the engine is very fast (it does not have
to load the CGT file from disk).
##END-NOTES
##ID-SEPARATOR '_'
##ID-SYMBOL-PREFIX 'Symbol'
##ID-RULE-PREFIX 'Rule'
##DELIMITER ','
/*

   Generated by Nany's grammar.h engine (modified from Kessel's C engine)

*/


##CHAR-SET-TABLE
##CHAR-SETS
#define GrammarCharset%Index%CharCount %CharCount%
wchar_t GrammarCharset%Index%[%CharCount%+1] =
{
##CHARS
	%UnicodeIndex%,
##END-CHARS
	0
};
##END-CHAR-SETS
##END-CHAR-SET-TABLE


/*
struct DfaEdgeStruct
{
  int TargetState;
  int CharCount;
  wchar_t *CharacterSet;
};
*/
##DFA-TABLE
##DFA-STATES
struct DfaEdgeStruct GrammarDfaEdgeArray%Index%[%EdgeCount%+1] =
{
##DFA-EDGES
	{%Target%, GrammarCharset%CharSetIndex%CharCount, GrammarCharset%CharSetIndex%},
##END-DFA-EDGES
	{-1, 0, NULL}
};
##END-DFA-STATES
##END-DFA-TABLE



##RULE-TABLE
##RULES
int GrammarRuleSymbolArray%Index%[%SymbolCount%+1] =
{
##RULE-SYMBOLS
	%SymbolIndex%,
##END-RULE-SYMBOLS
	-1
};
##END-RULES
##END-RULE-TABLE


##LALR-TABLE
##LALR-STATES
struct ActionStruct GrammarLalrActionArray%Index%[%ActionCount%+1] =
{
##LALR-ACTIONS
	{%SymbolIndex%, %Action%, %Value%},
##END-LALR-ACTIONS
	{-1, -1, -1}
};
##END-LALR-STATES
##END-LALR-TABLE



##SYMBOL-TABLE
/*
struct SymbolStruct
{
  short Kind;
  wchar_t *Name;
};
*/
struct SymbolStruct GrammarSymbolArray[%Count%] =
{
##SYMBOLS
	/* %Value.Padded% */   {%Kind%, L"%Name%"}%Delimiter%
##END-SYMBOLS
};
##END-SYMBOL-TABLE



##DFA-TABLE
/*
struct DfaEdgeStruct
{
  int TargetState;
  wchar_t *CharacterSet;
};
struct DfaStateStruct
{
  int AcceptSymbol;
  int EdgeCount;
  struct DfaEdgeStruct *Edges;
};
*/
struct DfaStateStruct GrammarDfaStateArray[%Count%+1] =
{
##DFA-STATES
	/* %Index% */    {%AcceptIndex%, %EdgeCount%, GrammarDfaEdgeArray%Index%},
##END-DFA-STATES
	{-1, -1, NULL}
};
##END-DFA-TABLE



##RULE-TABLE
/*
struct RuleStruct
{
  int Head;
  int SymbolsCount;
  int *Symbols;
  wchar_t *Description;
};
*/
struct RuleStruct GrammarRuleArray[%Count%] =
{
##RULES
	/* %Value.Padded% */   {%NonterminalIndex%, %SymbolCount%, GrammarRuleSymbolArray%Index%, L"%Description%"}%Delimiter%
##END-RULES
};
##END-RULE-TABLE



##LALR-TABLE
/*
struct ActionStruct
{
  int Entry;
  short Action;
  int Target;
};
struct LalrStateStruct
{
  int ActionCount;
  struct ActionStruct *Actions;
};
*/
struct LalrStateStruct GrammarLalrStateArray[%Count%+1] =
{
##LALR-STATES
	/* %Index% */   {%ActionCount%, GrammarLalrActionArray%Index%},
##END-LALR-STATES
	{-1, NULL}
};
##END-LALR-TABLE



/*
struct GrammarStruct
{
  char CaseSensitive;
  int InitialSymbol;
  int InitialDfaState;
  int InitialLalrState;
  int SymbolCount;
  struct SymbolStruct *SymbolArray;
  int RuleCount;
  struct RuleStruct *RuleArray;
  int DfaStateCount;
  struct DfaStateStruct *DfaArray;
  int LalrStateCount;
  struct LalrStateStruct *LalrArray;
};
*/
struct GrammarStruct Grammar =
{
##PARAMETERS
	/* CaseSensitive */      %CaseSensitive%,
	/* InitialSymbol */      %StartSymbol%,
##END-PARAMETERS
##DFA-TABLE
	/* InitialDfaState */    %InitialState%,
##END-DFA-TABLE
##LALR-TABLE
	/* InitialLalrState */   %InitialState%,
##END-LALR-TABLE
##SYMBOL-TABLE
	/* SymbolCount */        %Count%,
	/* SymbolArray */        GrammarSymbolArray,
##END-SYMBOL-TABLE
##RULE-TABLE
	/* RuleCount */          %Count%,
	/* RuleArray */          GrammarRuleArray,
##END-RULE-TABLE
##DFA-TABLE
	/* DfaStateCount */      %Count%,
	/* DfaArray */           GrammarDfaStateArray,
##END-DFA-TABLE
##LALR-TABLE
	/* LalrStateCount */     %Count%,
	/* LalrArray */          GrammarLalrStateArray
##END-LALR-TABLE
};

