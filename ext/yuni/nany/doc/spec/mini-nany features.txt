<title>Mini-Nany features</title>
<tag>nany</tag>
<tag>grammar</tag>


<h2>Introduction</h2>

<p>
Mini-Nany is a subset of Nany, in terms of grammar and features. Its goal
is to offer a more manageable language for compiler bootstrapping.
The purpose of this document is to describe what parts of Nany must be
implemented in a compiler for it to support Mini-Nany. Since most of this
document will be expressed in terms of differences to the full Nany language,
knowledge of the Nany language specification is required for full
understanding.
</p>


<h2>Typing</h2>

<p>
Mini-Nany typing is similar to the full Nany spec.
A compliant implementation _should_ detect type errors but it is not a
requirement, the most important point being the ability to generate
a valid binary from valid Mini-Nany code.
However, reflection is not available (through the <code>reflect</code> function).
</p>


<h2>Constrained sets</h2>

<p>
Nany offers lists by comprehension, which are defined using constraints on a
set, and the <code>|</code> operator. This is another very complicated feature that
Mini-Nany does not support.
</p>


<h2>Threading</h2>

<p>
Mini-Nany offers no multi-threading support (<code>&amp;</code> operator, <code>timeout</code>)
</p>


<h2>Distributed objects</h2>

<p>
Mini-Nany does not allow DObjects. Shared new operator is invalid.
</p>


<h2>Transactional memory</h2>

<p>
Mini-Nany is not transactional. Memory management mimics the
copy-on-write behaviour using refcounting smart pointers, and has
limited garbage collection capabilities.
</p>


