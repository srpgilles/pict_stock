<?xml version="1.0" encoding="UTF-8"?>
<language id="nany" _name="Nany" version="2.0" _section="Sources">
	<metadata>
		<property name="mimetypes">text/x-nany</property>
		<property name="globs">*.ny;*.pny</property>
		<property name="line-comment-start">//</property>
		<property name="block-comment-start">/*</property>
		<property name="block-comment-end">*/</property>
	</metadata>

	<styles>
		<style id="comment" _name="Comment" map-to="def:comment" />
		<style id="error" _name="Error" map-to="def:error" />
		<style id="escaped-character" _name="Escaped Character" map-to="def:special-char" />
		<style id="string" _name="String" map-to="def:string" />
		<style id="preprocessor" _name="Preprocessor" map-to="def:preprocessor" />
		<style id="keyword" _name="Keyword" map-to="def:keyword" />
		<style id="operator" _name="Operator" map-to="def:operator" />
		<style id="included-file" _name="Included File" map-to="def:string" />
		<style id="char" _name="Character" map-to="def:character" />
		<style id="type" _name="Data Type" map-to="def:type" />
		<style id="storage-class"	 _name="Storage Class"	   map-to="def:type"/>
		<style id="constant" _name="Constant" map-to="def:constant" />
		<style id="special-constant" _name="Constant" map-to="def:special-constant" />
		<style id="operator" _name="Constant" map-to="def:statement" />
		<style id="boolean" _name="Boolean value" map-to="def:boolean" />
		<style id="floating-point"	_name="Floating point number" map-to="def:floating-point"/>
		<style id="decimal"		   _name="Decimal number"	  map-to="def:decimal"/>
		<style id="octal"			 _name="Octal number"		map-to="def:base-n-integer"/>
		<style id="hexadecimal"	   _name="Hexadecimal number"  map-to="def:base-n-integer"/>
	</styles>

	<definitions>
		<!-- Main context -->
		<context id="nany">
		<include>

		<!-- Comments -->
		<context id="comment-inline" style-ref="comment">
			<start>#</start>
			<end>$</end>
			<include>
			<context ref="def:in-line-comment"/>
			</include>
		</context>

		<context id="comment-inline2" style-ref="comment">
			<start>\/\/</start>
			<end>$</end>
			<include>
			<context ref="def:in-line-comment"/>
			</include>
		</context>

		<context id="comment-multiline" style-ref="comment">
			<start>#\*</start>
			<end>\*#</end>
			<include>
			<context ref="def:in-comment"/>
			</include>
		</context>

		<context id="comment-multiline2" style-ref="comment">
			<start>/\*</start>
			<end>\*\/</end>
			<include>
			<context ref="def:in-comment"/>
			</include>
		</context>

		<context id="close-comment-outside-comment" style-ref="error">
			<match>\*/(?!\*)</match>
		</context>


		<!-- Keywords -->
		<context id="preprocessor-keywords" style-ref="preprocessor">
			<keyword>uses</keyword>
		</context>

		<context id="storage-class" style-ref="storage-class">
			<keyword>const</keyword>
			<keyword>immutable</keyword>
			<keyword>persistent</keyword>
			<keyword>read</keyword>
			<keyword>ref</keyword>
			<keyword>threadunsafe</keyword>
			<keyword>variadic</keyword>
			<keyword>write</keyword>
			<keyword>typeof</keyword>
		</context>

		<context id="keywords" style-ref="keyword">
			<keyword>&amp;</keyword>
			<keyword>abstract</keyword>
			<keyword>allow</keyword>
			<keyword>and</keyword>
			<keyword>as</keyword>
			<keyword>break</keyword>
			<keyword>class</keyword>
			<keyword>continue</keyword>
			<keyword>default</keyword>
			<keyword>do</keyword>
			<keyword>each</keyword>
			<keyword>else</keyword>
			<keyword>final</keyword>
			<keyword>for(bid)?</keyword>
			<keyword>function</keyword>
			<keyword>i[fns]</keyword>
			<keyword>method</keyword>
			<keyword>mod</keyword>
			<keyword>new</keyword>
			<keyword>not</keyword>
			<keyword>or</keyword>
			<keyword>operator</keyword>
			<keyword>private</keyword>
			<keyword>property</keyword>
			<keyword>protected</keyword>
			<keyword>public</keyword>
			<keyword>published</keyword>
			<keyword>return</keyword>
			<keyword>self</keyword>
			<keyword>stable</keyword>
			<keyword>state[s]?</keyword>
			<keyword>then</keyword>
			<keyword>transitions</keyword>
			<keyword>typedef</keyword>
			<keyword>var</keyword>
			<keyword>where</keyword>
			<keyword>while</keyword>
			<keyword>workflow</keyword>
			<keyword>xor</keyword>
		</context>

		<!-- Built-in types -->
		<context id="types" style-ref="type">
			<keyword>uint8</keyword>
			<keyword>uint16</keyword>
			<keyword>uint32</keyword>
			<keyword>uint64</keyword>
			<keyword>uint</keyword>
			<keyword>int8</keyword>
			<keyword>int16</keyword>
			<keyword>int32</keyword>
			<keyword>int64</keyword>
			<keyword>int</keyword>
			<keyword>float</keyword>
			<keyword>double</keyword>
			<keyword>char</keyword>
			<keyword>string</keyword>
			<keyword>bool</keyword>
			<keyword>any</keyword>
		</context>

		<!-- Operators -->
		<context id="operators" style-ref="operator">
			<keyword>|</keyword>
			<keyword>:</keyword>
			<keyword>:=</keyword>
			<keyword>=</keyword>
			<keyword>=&gt;</keyword>
			<keyword>&lt;=</keyword>
			<keyword>&lt;</keyword>
			<keyword>&gt;=</keyword>
			<keyword>&gt;</keyword>
		</context>

		<!-- Constants -->
		<context id="boolean" style-ref="boolean">
			<keyword>true</keyword>
			<keyword>false</keyword>
		</context>

		<context id="float" style-ref="floating-point">
			<match extended="true">
					(?&lt;![\w\.])
						((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
						([0-9]+[Ee][+-]?[0-9]*))
						[fFlL]?
						(?![\w\.])
			</match>
		</context>

		<context ref="def:hexadecimal" />

		<context ref="def:octal" />

		<context ref="def:decimal" />

		<context id="special-constants" style-ref="special-constant">
			<keyword>nil</keyword>
		</context>

		<!-- Strings -->
		<context id="string" style-ref="string" end-at-line-end="true">
			<start>"</start>
			<end>"</end>
			<include>
			<context id="escape" style-ref="escaped-character">
				<match>\\.</match>
			</context>
			</include>
		</context>

		<context id="string-literal" style-ref="string" end-at-line-end="false">
			<start>"""</start>
			<end>"""</end>
			<include>
			<context id="escape2" style-ref="escaped-character">
				<match>\\.</match>
			</context>
			</include>
		</context>

		<!-- Characters -->
		<context id="char" end-at-line-end="true" style-ref="string">
			<start>'</start>
			<end>'</end>
			<include>
			<context ref="escape"/>
			</include>
		</context>



		</include>
	</context>
	</definitions>
</language>
